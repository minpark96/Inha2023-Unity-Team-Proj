c3af2b93-76cf-49ec-be74-fc8ae9170dde
튕기는 조건 - 벽타다가, R쓰다가, 물약먹다가

PlantUML 개발문서
포션애니메이션 고쳤음 문제시 0117 이전에서 가져오기


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ해야할거ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
각각의 state가 actor의 값들을 갱신시켜야함
LimbCollision도 마찬가지
 이때 StateMachine을 참조하고있는 state들이 옳은건지 확인

PunchReady 스테이트 이름이 적절하지 않음 Punch와 Grabbing 둘 중 하나로 
	이동하는 상태니 ArmReady 등으로 수정

UpperBodySM 각 State선언시 인터페이스로 선언할지, 구체화된 클래스로 선언할지

PunchAction 동작에서 충돌모드 잡다한 코드 정리, 공격타입 여기서 하는게 맞는지

MoveAction과 PunchAction에 BodyHandler가 안들어가게 수정할 수 있는지 체크할것
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ리팩요소 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
인풋 check식으로 플레이어 동작시키기
물리관련 FIxed로 빼기
아이템스크립트 구조다시
플레이어 상태패턴
행동트리 추가
파싱추가

punRPC 논리상 오작동 있는지 한번 체크
RPC 함수하나 통하도록 (여기서 디버그 가능할수도)
- 애니메이션파일 나누기
게임시스템 스크립트 이해하고 개선
플레이어 프리팹 하나로 통일

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ영상 피드백	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

	//게임의 긴장감, 매달리기등에 대한 이유, 목적

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ서버 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Actor에서는 delegate로 상태변경과 ID를 저장
public delegate void ActorStateHandler(Actor actor, int connectionID, ActorState state);
public delegate void GangIDChanged(int newID);

오너
1. 시작시 [1]'2'(master)


InputDriver
InputState
Actor
ControlHandeler
ControlHandeler_Human
GangBeastsInputControl
DigialState
PlayerInputHandler




check를 전부 마스터클라이언트

로컬클라이언트 actor
FixedUpdate
{
	마스터한테서 받은 체크들로 플레이어 state변환
		(여러가지 체크들 , 킥버튼이 눌렸는지 점프가 눌렸는지 등)
	Fixed움직임
}

FixedUpdate안의 체크들은 actor.inputState.GetDigitalInput을 보고 동작여부를 체크함



인풋핸들러 fixedUpdate 맨위에다 마스터에서 받은 입력으로 prev,current를 순회해서 체크해놔야함
인풋핸들러에다 마스터에서 보낸 키상태를 저장해 놔야할듯


플레이어 인풋핸들러에서 마스터한테 받은 입력을 체크하여 플레이어의 state를 변경시키고
state변경에 따른 함수들은 밑에서 실행해야함

OnMouseEvent_Grab함수등에서 state나 체크함수만 적용하거나?
모든 행동을 state로 나누기는 복잡해져서 체크함수 후 바로 움직이게 하는 방법도 써야하는데
이러면 인풋이벤트가 update에 있으면 안되고 fixed에 있어야함 

해결책1
현재 이벤트식 인풋은 update에 있는데 이 상태에서 해결하려면 인풋 받았을때 isPunch등의 인풋 bool형과
fixedUpdate에서 그걸 체크해서 실행하는 방식으로 해야함
해결책2
인풋이벤트 방식을 고쳐야함 중간에 Button을 하나 더 추가하는 방식?
인풋이벤트 방식을 없애고 인풋키를 전부 관리하는식으로 


Actor의 Fixed에서 Controller의 AllCheck(check하며 actor의 state를 바꿈)를 실행하고 
state에 따른 행동함수를 실행(check시 반드시 state를 바꾸지는 않고 check에서 행동함수를 실행하기도 함)

controller는 플레이어와 ai가 쓸 수 있게 상속해서 써야함
플레이어는 input이 눌렸는지 등으로 check하다 함수를 실행
ai는 행동트리 컴포넌트가 actor의 input을 누르고 controller_ai가 상시체크 돌리다 이를 실행하는 방식




커맨드패턴
1번째 클라이언트가 마스터 클라이언트고
3번째 클라이언트가 입력하면(Input.getKeyDown 등이 눌리면 클릭, 버튼다운,홀드 등)
이를 클라이언트가 어떤 입력인지 판단하여 
마스터에게 보내면 (커맨드의 enum값을 보냄)
마스터는 입력받은 값(enum)을 큐로 받아놨다가(?미정) 해당하는 커맨드를 3번 캐릭터에 RPC-ALL로 쏜다
그러면 받은 캐릭터들이 해당 커맨드의 excute를 실행
  
이러면 선행되어야 할것
-행동들을 커맨드로 빼야함
	이동,점프,펀치(클릭버튼 구현해야 할수도),스킬,그랩(고민해서짤것),




플레이어 각 상태마다 Update에서 Input을 통제하고 입력을 받는다.
InputHandler나 InputManager에서 받은 Input을 플레이어 상태의 Update에서 감지하고
해당하는 커맨드 enum을 master클라이언트로 보내고 마스터는 입력받은 커맨드의
excute함수를 RPC-ALL를 쏴서 각 클라이언트를 움직인다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ행동트리ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
actor가 ai인지 확인하고 ai일 경우  actor에 행동트리 컴포넌트를 붙이는 방식
ai일 경우 controller를 human 이 아니라 ai걸로 사용한다.
(행동트리 컴포넌트가 actor의 input을 누르고 controller_ai가 상시체크 돌리다 이를 실행하는 방식
ai는 마스터클라이언트라 마스터로 커맨드를 보낼필요 없이 바로 RPC_ALL로 실행하면 될듯)보류
플레이어는 상태패턴으로 관리하고 AI는 상태를 재끼고 트리로만하거나
상태 내부에 트리를 하나씩 만들어서 조종

시퀸스


셀렉터


자신 상태 확인(낙사지형에 있는지, 자기장 밖에 있는지, 스테미너가 낮은지, 체력상황이 안좋은지(?))
	-낙사와 자기장은 해당 지형 스크립트에서 actor에게 보내기
-도주 할지 체크

주변 서치 (상대플레이어, 아이템, 탈 수있는 벽이 있는지)

-공격
	-아이템공격, 일반공격
-벽타기
-아이템찾기

가져야될 정보
양손이 뭘하는지, 들고있는지, 아이템 장착상태인지, 
여러 타겟, 최우선 타겟, 낙사감지, 벽 감지, 플레이어정보, 자기장 정보, 상대플레이어 상태정보,


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ상태패턴ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
각 상태 Update에서 InputGetDownKey로 커맨드를 받고 마스터로 해당 커맨드를 보냄
마스터Fixed에서 해당 커맨드를 보낸 플레이어에게 RPC로 excute하고 커맨드 저장

마스터에서 커맨드 기록을 저장할경우 클라이언트나 상태가 _activeCommnad같은 커맨드저장
변수를 가질 필요가 없음

상태마다 InputGetDownKey를 사용하니 이 함수는 상태클래스의 부모에 넣어놓던가
InputManager나 PlayerInputHandler에서 가져와서 쓰는식으로 해도 괜찮을듯

상체 - 펀치, Gabbing , Equip, Climb, 스킬, 헤딩
  Idle
	2.스킬레디->3. 스킬 두개 
		(계층구조,상태머신추가,스크립트 하나에서 처리 3가지 방법중 하나 고려)
			스킬 두개 차이점 - 액션,공격속성,사운드,이펙트 등
	2.헤딩
	2.드롭킥
	2.펀치레디->3. 펀치, 그랩
	
	4.그랩 완료시-> 5(1).아이템장착, 5.(플레이어잡기, 벽잡기)
	
	아이템장착->총,포션,근접무기 (계층구조 사용 혹은 weapon상태머신 추가)	
	

하체 - Stand, Move, Jump, Fall, 

커맨드 - DropKick



플레이어의 상태가 _activeCommand를 가지고 비교할 수 있어야함
그리고 그 상태에서 가능한 커맨드면 실행

 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ커맨드ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
https://welcomeheesuk.tistory.com/72

마우스 L버튼 커맨드가 여러 액션을 실행시켜야함
특정 상태가 DynamicData에 자신의 상태를 넣고
data를 확인한 커맨드가 여러 액션중에 적합한 액션을 실행시켜야함


ㅡㅡ고민해야할것
대부분의 커맨드는 RigidBody16개를 필요로함
Move커맨드는 플레이어가 뛰고있는지 등의 상태를 알아야함


move스테이트에서 사이클을 돌려야하고
move커맨드가 사이클을 알아야함(멤버변수로 사이클 포인터를 따놔야함)





excute안에 세부움직임을 넣는건 불가
excute에서  actor의 행동함수를 실행시키는 방식으로
 행동함수들은 actor의 , 상태, 등등이 필요함
 행동함수들은 애니메이션데이터, 애니메이션플레이어, Rb16개(바디핸들러)를
 	기본적으로 참조함

actions 클래스는 action 델리게이트와 이벤트들을 들고있고
해당 이벤트에 actions의 매개변수들을 세팅한다 
action 클래스는 이 이벤트를 구독 


Excute를 InputHandler에서 하는게 아니라 핸들러가 키만 저장하고
actor나 playerController가 Excute를 하는 방식으로

각 state는 actor의 data를 갱신시켜야한다


AnimationData를 커맨드는 깡통만 가지고 있고 actor의 AnimationData를 생성자에서
참조받는 식으로

현재 AnimationData가 커맨드 안에 있는데 이를 actor가 가지고 있게 하고
Execute에 매개변수로 actor를 받는 방법으로 바꿀수도 있음


InitCommand 함수로 키 매핑을 PlayerInputHandler에서 하고있음

command.Excute는 마스터에서 각 클라이언트를 넣어서 RPC ALL로 사용해야함
그리고 그 command는 클라이언트가 마스터에게 보낸 커맨드여야 함
(기존프로젝트 InputManager의 이벤트 방식을 참고해도 좋을거같음,
 인풋 기다리다가 인풋 들어오면 RPCALL로 실행시키는 방식)

PlayerController

Move
	RunCycleUpdate();
        	RunCyclePoseBody();
       	 RunCyclePoseArm(Side.Left, leftArmPose);
       	 RunCyclePoseArm(Side.Right, rightArmPose);
       	 RunCyclePoseLeg(Side.Left, leftLegPose); Thigh2개 leg 2개
       	 RunCyclePoseLeg(Side.Right, rightLegPose);



        Zero,
        ZeroReverse,
        Forward,
        Backward,
        Up,
        Down,
        Right,
        Left,

  FootL,
        FootR,
        LegLowerL,
        LegLowerR,
        LegUpperL,
        LegUpperR,
        Hip,
        Waist,
        Chest,
        Head,
        LeftArm,
        RightArm,
        LeftForeArm,
        RightForeArm,
        LeftHand,
        RightHand,
        Ball,

AniData
1. 행동갯수 리스트 
{ 행동갯수 반복
	움직일파츠data갯수
	{움직일파츠갯수 반복
		Standard Rigidbodies
		ActionRigidbodies
		Force Directions
		Force Power Values
	}
}

Angle Ani Data
1. 토탈 data갯수
{ 토탈data갯수 반복
	내부data갯수
	{내부data갯수 반복 //1말고는 안씀
        ActionRigidbodies,
        StandardPart,
        TartgetPart,
        StandardDirections,
        TargetDirections,
        AngleStability,
        AnglePowerValues,
	}
}


frameDataLists[Define.AniFrameData.RightPunchingAniData.ToString()]


    public enum AniForceData
    {
        DropAniData,
        RightPunchingAniData,
        LeftPunchingAniData,
        MoveForceJumpAniData,
        HeadingAniData,
        RSkillAniData,
        ItemTwoHandAniData,
        PotionReadyAniData,
        PotionDrinkingAniData,
        ItemTwoHandLeftAniData,
        PotionThrowAniData,
    }

    public enum AniAngleData
    {
        RightPunchAniData,
        LeftPunchAniData,
        RightPunchResettingAniData,
        LeftPunchResettingAniData,
        MoveAngleJumpAniData,
        HeadingAngleAniData,
        RSkillAngleAniData,
        ItemTwoHandAngleData,
        PotionAngleAniData,
        ItemTwoHandLeftAngleData,
        PotionThrowAngleData,
    }


안한거ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
방사형 아이템, 순간이동총, 복제총
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

할거
양손무기 UseType 시간체크  - 완료
무기 날라가는거 		- 완료
양손무기 애니메이션 방향     -완료
양손무기 grabPose 함수에서 targetPosition 설정해야함 - 완료(안쓰기로함)
아이템 쿨타임 - 양손무기, 총 - 완료
소비템 던지기


포톤뷰 rpc를 게임센터가 아닌 actor가 쓰도록 하거나
게임센터 instance를 로컬들도 가지고 있게 하는 식으로 해야함

코루틴방식으로 하려면 풀매니저 스크립트를 거의 하나 더 만드는 식으로 작업해야함
이벤트방식이나 findObject 사용하는 방법 고려


투사체 동기화
벽서치 수정
방사형 만들기
플레이어 들때 빠르게 들게
감전 전이상태 버그

동작시간 UseType 스크립터블로 받게
그림자







기절상태 회복할때 마지막에 원본값 한번 넣어줘야함

기절할때 차지 초기화 및 관절 프리즈 풀기

벽서치 제대로 안되는 버그

드롭킥 제자리에서 할때도 파워있게 다만 최대속도 있게

--벽타기 리메이크--
벽타기 서치 제대로 안먹을때 있음, 벽타기 팔 모션 추가, 다리가 벽에 붙어야 하거나
점프각도 계산해야 하는지, 점프할때 조금 뒤로 뛰고 점프상태에서 이동속도를 붙여서 처리할지




기절상태와 죽음상태 나눌 필요 있음 죽음상태면 hip의 프리즈 풀어도 될듯

플레이어 잡을때 타겟팅부위가 팔다리가 90%이상 안잡히게끔 수정해야함

죽고나서 시체가 움직이면 카메라가 안따라가는 버그

InteractableObject에서 상체, 하체 타겟들 나눠야 할수도


잡기상태일때 관절위치가 마음에 안듬 원거리까지 하려면 세팅값을 넣어서 해야하나 싶음



플레이어 컨트롤러에서 플레이어인풋핸들러를 추출하는게 좋아보임
- 아이템장착 타입에 따라 프레스, 클릭에서 애니메이션을 따로 사용

아이템 그랩하거나 놓을때 slow 버프디버프 적용

인풋매니저 키보드입력 종류들(프레스, 버튼다운 등) - 나중에 리팩
	InputState,ControlHandler, Actor-FixedUpdate, ControlHandler참조

드롭킥시 충격량을 좀 줄이고 기절한 후에 바닥에 쓸려가게끔 하면 애니메이션 잘나올듯






--아이템 --
무기 휘두를때 무기에 가해지는 물리량때문에 팔이 휘는 경우가 있음 	- 해결
아이템이 다른 물리작용을 안받게
무기 휘두를때만 데미지타입 바꾸게
팔을 완전고정 						- 해결



로컬에서 방장을 아이템으로 때릴때 충돌이 안들어가는 버그	-완료
아이템 휘두를때 포지션 동기화 안되는 버그 			-완료
-LockArm,UnLockArm PunRPC 쓸때 id 해야할수도
-연결은 잘 되는거 같은데 addforce 줄때 뭔가 문제가 있는거같음
-손에 쥘때 무기 위치 동기화가 될때있고 안될때 있음 - 아이템 위치 옮길때 동기화 안된듯
-무기 쥐고있을때 다른플레이어 화면에서는 무기가 덜덜떨리면서 보이는 현상
-other로 뿌린거 체크
-충돌이 여러번 나는게 문제
-플레이어 새로운  프리팹 RigidbodyView anguarVel 체크했음 
- 무기 최소 데미지 넣어야 할듯

넉백 반응이 느려진 버그					-2
	(마찰력 꺼놨음 fall 상태 만들어야할듯, 컴퓨터 사양을 타는듯 최적화 필요)
드롭킥 넉백량 계산해야함 					-3(대충 맞춰놓음)
플레이어 스탯 스크립터블로					-완료

플레이어 끌고다니기					-5(보류)
플레이어 들었을때 걸어다닐수있게				-완료
맵에 interactable오브젝트 포톤뷰랑 리지드바디뷰, 레이어설정 해야함-완료
레이어 설정에서 interactable오브젝트에 climb오브젝트를 추가해서 분류 해야 할듯 - 완료


무기 들었을때 머리꺾이는 현상    		 		- 완료
바닥이 서치되서 팔이 밑으로 가는 버그 		-임시해결 (상태추가로 추가해야할듯)
스탠드상태 마찰력구현         				- 완료
원거리 아이템 마무리					- 완료
벽타기							 -완료
상태이상 전염						-완료







ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
플레이어 스탯데이터 

플레이어컨트롤러
-
Run Speed
Max Speed

Actor
-
Head Multiple
Arm Multiple
Hand Multiple
Leg Multiple

Player Attack Point
Health
Max Health
Stamina
Max Stamina

Damage Reduction
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

Targeting Handler
-
MaxAngle - 정면에서 좌우 몇도

CollisionHandler
데미지
object(아이템) 800
Punch 1000
DropKick 700
Headbutt 2300

object 10
punch 노말4 위2
Dropkick 노말 20, 위 10
Headbutt 노말 20 위 10

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Status Handler
-
power up TIme
Burn Time
Exhausted Time
Slow Time
Freeze Time
Shock Time
Stun Time

Ice Damage
Burn Damage

기절내성
knockoutThreshold

Balloon State
-
Balloon Duration
Rotate Angle
Force


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ플레이어 들기ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
타겟을 서치할때 플레이어가 잡히면 팔이 잘 잡히지 않고 머리,몸이 주로 잡힘
 -> 몸 부위에 우선순위가 있는듯함


 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ잡기ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
정면 오브젝트 서치 후 


잡기는 각각의 손이 따로 들어가야 하고 좌우의 것을 동시에 잡는것도 가능
잡기를 할때 왼쪽에서 55도 오른쪽에서도 55도씩 잡기 구역을 두어서
가운데 10도는 양손으로 잡게끔

타겟팅에서 매개변수로 사이드 넣고
사이드마다 각도 바꿔서 넣기
양손다 받아왔는데 해당 객체가 같으면 아이템집기등으로 넘어가기





무기를 잡을때의 코드도 수정해야 할 수도




ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ캐릭터 데이터 테이블 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


체력 - Ragdoll 오브젝트 - Status Handler 스크립트 - Health(현재체력) ,MaxHealth(시작체력,최대체력)
스테미너 - 상태이상 후 작업
스테미너 회복량 - 상태이상 후 작업

이동속도 - Ragdoll 오브젝트 - PlayerController 스크립트 - MaxSpeed(최대이동속도) 기본10
가속도 - Ragdoll 오브젝트 - PlayerController 스크립트 - Run Speed(가속도) 기본100
점프력 - Ragdoll 오브젝트 - PlayerController 스크립트 - MoveForceJumpAniData - Element0, Element1의 ForcePowerValues 두개(현재 170)

공격력 - Ragdoll 오브젝트 - Actor 스크립트 - PlayerAttackPoint (1이 기본값) 상태이상 후 재작업
피해 경감률 - Ragdoll 오브젝트 - Actor 스크립트 - DamageReduction(0이면 없음 1이면 면역 / 아직 미구현)
바디 파츠별 데미지 배수 - Ragdoll 오브젝트 - Actor 스크립트 -HeadMultiple 등등 엑셀값 기준으로 적용해놨음






ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ아이템 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

아이템 타입 구분
양손무기, 한손무기 - 공격속도(애니메이션속도)
원거리무기 - 
포션 -  Use함수 실행시 사라짐

투사체 - 속도,  데미지속성, 특수능력





아이템의 속성
오너,
타입에 따른 그랩포지션

아이템 타입
데미지 타입 (원거리는 디폴트, 포션은 피격효과) 
충격량(데미지) (포션은 0) - 던지거나 휘둘렀을시에 충격량
쿨타임 (포션은 0)



모든 아이템은 3가지 공통점을 가짐 
장비하기 (플레이어의 손이 아이템에 닿았을때 장비상태로 전환)
	
던지기    (무기종류는 그냥 충력량만 주고 포션종류는 대상과 충돌시 대상에게 디버프를 줌)

사용하기 (아이템 종류에 따라 사용 모션이 다르다)
	(원거리 무기는 모션을 넣어야할지 추후 고민, 무기마다 발사속도가 다르게 투사체를 소환
	, 투사체는 따로 개발)
	(포션은 먹는모션으로 동일 , 포션마다 사용효과가 다름)


차이점
장비하기 - 고유의 장착포지션들을 가짐(기본적으로 아이템 타입별)
던지기 - 충격량과 데미지타입
사용하기 - 사용모션, 충격량, 데미지타입






아이템은 소비형(포션,투사체), 장비형(근접형,원거리형)이 있다.
	이에 따라 사용후 사라지는지 안사라지는지를 구분
	


아이템의 장착타입은 아이템을 집어드는 모션과 들고있는 모션에 구분을 준다.

아이템넘버는 실제 아이템의 세부구분을 한다.
	


그랩누르면 타겟을 서치
서치타겟이 아이템이면 아이템의 타입에 따라 그랩 방법모션이 바뀐다.
(한손(소비형),양손, 원거리)

장착이 된 후에
던지기 사용하기로 나뉨

던지기는 던진 물체가 플레이어에 충돌했을때 (소비형만)각각 효과가 있고
	(충돌 효과는 ItemScript에서 정의)

사용하기는 아이템 타입에 따라 4가지로 모션이 나뉜다.
	(사용모션은 Controller에서?)


사용하기 효과는 아이템마다 각자 다름


item
소비형 장비형 상속구조

item은 Use에서 사용효과를 주거나 혹은 상태이상을 주는 속성을 가지고 있음

소비형은 던지기 효과를 오버라이드해서 추가





item 속성
1.충격량 (던지기는 동일하고, 휘둘렀을시에 다르게 주는 충격량)
2.상태이상 (화상,빙결,취함,불끈,투명화,풍선화 / 

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ







캐릭터 상태
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
죽음
기절
스탠드
달리기
점프
Fall 추락
Climb 등반
그외 추가



캐릭터 속성
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
게임에서 구분하는 플레이어 ID
캐릭터객체 ID와 해당 캐릭터를 컨트롤하는 컨트롤러 ID가 있어야 하고 이를 매칭시켜서 작동
AI가 작동시킬 수 있도록 컨트롤러를 추상화
캐릭터 매쉬나 색상등을 바꿔 낄 수 있도록





캐릭터 컴포넌트 스크립트
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
인풋 핸들러
컨트롤 핸들러
바디 핸들러
타겟팅 핸들러
무브먼트 핸들러
스테이터스 핸들러
이펙트 핸들러



캐릭터 메서드
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
캐릭터 코스튬을 입히는 함수
업데이트 스테이트(픽스드업데이트에 넣을것)




스테이터스핸들러, 콜리전핸들러 체크 GrabEvent InputState(네트웤관련)



그랩상태가 될때 관절을 어디에 생성하는지 만약 손에 생성한다면 손에는 관절이 두개?

부위에 checkVelocity를 해서 움직임이 20 이상이면 damage종류를 object로



넉다운 상태가 되면 몸 부위들의 interactable.damage를 default로
펀치상태면 손의 interactable.damage를 punch로


무언가를 잡고있는 그랩상태일때 스태미너 소모

InteractableObject.Grab.DrainSlow: 그랩상태
DrainMedium,DrainFast

그랩시 actor.bodyHandeler.rightGrabInteractable가 활성화되는지 
그랩을 하면 잡는 주체의 바디핸들러에서 leftGrab변수에 잡히는 객체의 joint, rigid등을 넣는다
actor.bodyHandeler.leftGrabJoint;변수등이 잡고있는 객체의 관절
그랩으로 잡고있는 상태에서 누군가를 또 잡으려고 마우스 버튼을 누르면 전의 잡고있던건 풀어준다(리셋)


기절했다가 깨어나면 체력 다시 풀로
자연체력재생이 있음
invulnerable 무적상태?
일정이상의 데미지가 들어오면 기절?




포톤 잡기
트리거 스테이에서 상태만 체크하고 
update쪽에서 함수를 만들고 이걸 보내주는 방식 으로 (구독방식?)

포톤 싱크
리지드바디의 문제 포톤 싱크, 리지드바디로 검색해서 해결



1. 뼈대

1-1 기본사용
1-2 파티애니멀즈 *

2. 애니메이션

2-1 에셋 *
2-2 파티애니멀즈 
2-3 손코딩




애니메이션을 따라하되 캐릭터에 충격이 가해지면 애니메이션을 끄는 방식?




파티애니멀즈 뼈대 - 에셋모델링이 연결이 가능한가?
1.에셋모델에 뼈대 컴포넌트들을 넣고 중간 관절들을 끼워맞추는 방법

2.뼈대를 매쉬없이 겹쳐서 들고있다가 뼈대가 맞으면 스킨이 그 움직임을 따라가는 방법
  애니메이션을 사용할때
   2-1 에셋애니메이션을 사용할땐 스킨이 움직이고 뼈대가 따라감
   2-2 파티애니멀즈 애니메이션을 사용할 땐 뼈대가 움직이고 스킨이 따라간다.
   2-3 이 방법은 1번 에셋모델에 관절을 더 추가하는 방식이 선행되어야 할 수도 있음

3. 모델링 프로그램을 열어서 뼈대를 갈아치운다.


기본사용 뼈대를 쓸 경우

장점
 - 에셋 애니메이션 사용이 편할 수 있음
 - 스킨입히기 과정이 생략된다.
단점
 - 움직임이 부자연스러워진다
 - 물리적 구현을 할 때 퀄리티가 부족할 수 있음






펀치는 반드시 번갈아가며 나간다.
짧게 클릭할 경우 펀치가 나간다
클릭을 1초 이상 했다가 뗄 경우에는 펀치는 나가지 않음

그랩은 앞의 180도각도 일정 범위내에 오브젝트가 있으면 손이 나가서 잡고 (몸도 약간 전진하는듯)
뒤의 180도에는 반응하지 않는다.

그랩을 할때 그랩 범위내에 아무 오브젝트가 없다면 애니메이션은 반응하지 않는다.




ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
할거

1. 캐릭터 콜라이더 크기 맞추기

4. 잡기코드 붙이기
5. 코드 정리






duck
kickDuck



변환
갱비스트(일반적인 방향) -> 파티이즈오버
forward = -up

up = forward

right = right;

back = up

down = -forward
left = -right
		public float airSpeed = 4f;

		public float _cycleModifer = 1f;

		public float cycleTimer;

		public float cycleSpeed = 0.23f;

		private static Vector3 runVectorForce10 = new Vector3(0f, 16f, 0f);

		private static Vector3 runVectorForce5 = new Vector3(0f, 8f, 0f);

		private static Vector3 runVectorForce2 = new Vector3(0f, 4f, 0f);

		private static Vector3 counterForce = new Vector3(0f, 8f, 0f);



리지드바디 컨티뉴어스로 변경
팔 각도 변경




조사할 변수
 actor.inputSpamForceModifier;



